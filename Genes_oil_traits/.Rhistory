knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
gma_homofam_bait <- read_delim("/home/dayana/dragonstone/August_2023_analysis/SEPT EMBER_pos_Quali/Oil_homofam/draft_table1_gma_homofam.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
gma_homofam_bait <- read_delim("/home/dayana/dragonstone/August_2023_analysis/SEPTEMBER_pos_Quali/Oil_homofam/draft_table1_gma_homofam.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(gma_homofam_bait)
gma_homofam_genes <- read_delim("/home/dayana/dragonstone/August_2023_analysis/SEPTEMBER_pos_Quali/Oil_homofam/draft_table1_gma_homofam.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
pvu_homofam_genes <- read_delim("/home/dayana/dragonstone/August_2023_analysis/SEPTEMBER_pos_Quali/Oil_homofam/draft_table1_pvu_homofam.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
pvu_homofam_genes <- read_delim("./pvu_homofam_genes",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#gma
gma_count <- table(gma_homofam_genes$Homofam)
gma_count <- as.data.frame(gma_count)
colnames(gma_count) <- c("Homofam", "gma_counts")
#pvu
pvu_count <- table(pvu_homofam_genes$Homofam)
pvu_count <- as.data.frame(pvu_count)
colnames(pvu_count) <- c("Homofam", "pvu_counts")
#join data
gma_pvu_count <- left_join(gma_count, pvu_count, by="Homofam")
#classify homofam
classified_df <- gma_pvu_count_norm %>%
mutate(Fam_class = case_when(
diff_gma_pvu < 0 ~ "loss",
diff_gma_pvu == 0 ~ "neutral",
diff_gma_pvu >= 1 ~ "gain",
TRUE ~ NA_character_  # Handle other cases if needed
))
#classify homofam
classified_df <- gma_pvu_count %>%
mutate(Fam_class = case_when(
diff_gma_pvu < 0 ~ "loss",
diff_gma_pvu == 0 ~ "neutral",
diff_gma_pvu >= 1 ~ "gain",
TRUE ~ NA_character_  # Handle other cases if needed
))
View(gma_pvu_count)
gma_pvu_count <- gma_pvu_count %>%
mutate(diff_gma_pvu = gma_counts - pvu_counts)
#classify homofam
classified_df <- gma_pvu_count %>%
mutate(Fam_class = case_when(
diff_gma_pvu < 0 ~ "loss",
diff_gma_pvu == 0 ~ "neutral",
diff_gma_pvu >= 1 ~ "gain",
TRUE ~ NA_character_  # Handle other cases if needed
))
View(classified_df)
View(classified_df)
table(classified_df$Fam_class)
fam_class_counts <- table(df$Fam_class)
fam_class_counts <- table(classified_df$Fam_class)
library(ggplot2)
#plot a pie chart
df_fam_class_counts <- na.omit(as.data.frame.table(fam_class_counts, responseName = "Count"))
ggplot(df_fam_class_counts, aes(x = "", y = Count, fill = Fam_class)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_manual(values = c("gain" = "blue", "other" = "red")) + # Personalize as cores conforme necessário
labs(fill = "Fam_class")
View(df_fam_class_counts)
#plot a pie chart
df_fam_class_counts <- as.data.frame.table(fam_class_counts, responseName = "Count") %>%
rename(Fam_class = Var1, Count = Count)
ggplot(df_fam_class_counts, aes(x = "", y = Count, fill = Fam_class)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_manual(values = c("gain" = "blue", "other" = "red")) + # Personalize as cores conforme necessário
labs(fill = "Fam_class")
ggplot(df_fam_class_counts, aes(x = "", fill = Fam_class)) +
geom_bar(width = 1, position = "fill") +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_manual(values = cores) +
labs(fill = "Fam_class")
ggplot(df_fam_class_counts, aes(x = "", fill = Fam_class)) +
geom_bar(width = 1, position = "fill") +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Fam_class")
ggplot(df_fam_class_counts, aes(x = "Count", fill = Fam_class)) +
geom_bar(width = 1, position = "fill") +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Fam_class")
ggplot(df_fam_class_counts, aes(x = "", y = Count, fill = Fam_class)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_manual(values = c("gain" = "#ADD8E6", "loss" = "#A9A9A9", "neutral" = "#FFC0CB")) + # Cores personalizadas
labs(fill = "Fam_class")
ggplot(df_fam_class_counts, aes(x = "", y = Count, fill = Fam_class)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Fam_class")
ggplot(df_fam_class_counts, aes(x = "", y = Count, fill = Fam_class, label = Count)) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), size = 5) +  # Adiciona os rótulos com os valores
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Fam_class")
ggplot(df_fam_class_counts, aes(x = "", y = Count, fill = Fam_class, label = Count)) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), size = 2) +  # Adiciona os rótulos com os valores
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Fam_class")
ggplot(df_fam_class_counts, aes(x = "", y = Count, fill = Fam_class, label = Count)) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), size = 3) +  # Adiciona os rótulos com os valores
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Fam_class")
ggplot(df_fam_class_counts, aes(x = "", y = Count, fill = Fam_class, label = Count)) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), size = 2.5) +  # Adiciona os rótulos com os valores
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Fam_class")
View(df_fam_class_counts)
View(classified_df)
# Scenario 1 (1:2+)
scn1 <- classified_df %>%
filter(pvu_counts==1, gma_counts>1)
View(scn1)
#Scenario 2 (2:3+)
scn2 <- classified_df %>%
filter(pvu_counts==2, gma_counts>2)
#Scenario 2 (2:3+)
scn2 <- classified_df %>%
filter(pvu_counts>=2)
#Scenario 2 (2:3+)
scn2 <- classified_df %>%
filter(pvu_counts>=2, gma_count>2)
#Scenario 2 (2:3+)
scn2 <- classified_df %>%
filter(pvu_counts>=2, gma_counts>2)
View(scn2)
#Scenario 2 (2:3+)
scn2 <- classified_df %>%
filter(pvu_counts>=2, gma_counts>=2)
View(scn2)
#Scenario 2 (2:3+)
scn2 <- classified_df %>%
filter(pvu_counts>=2, gma_counts>2)
View(gma_homofam_genes)
#Count homologous families in each scenario
scn_counts <- classified_df %>%
filter((pvu_counts == 1 & gma_counts > 1) | (pvu_counts >= 2 & gma_counts > 2)) %>%
count(Scenario = ifelse(pvu_counts == 1 & gma_counts > 1, "Scenario 1", "Scenario 2"))
View(scn_counts)
#Plot a pie chart of homologous gain families
# Plotando um gráfico de pizza (pie chart)
ggplot(counts, aes(x = "", y = n, fill = Scenario)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Scenario")
#Plot a pie chart of homologous gain families
# Plotando um gráfico de pizza (pie chart)
ggplot(scn_counts, aes(x = "", y = n, fill = Scenario)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Scenario")
#Count homologous families in each scenario
scn_counts <- classified_df %>%
filter((pvu_counts == 1 & gma_counts > 1) | (pvu_counts >= 2 & gma_counts > 2)) %>%
count(Scenario = ifelse(pvu_counts == 1 & gma_counts > 1, "scn1(1:2+)", "scn2(2:3+)"))
#Plot a pie chart of homologous gain families
# Plotando um gráfico de pizza (pie chart)
ggplot(scn_counts, aes(x = "", y = n, fill = Scenario)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Scenario")
#Plot a pie chart of homologous gain families
# Plotando um gráfico de pizza (pie chart)
ggplot(scn_counts, aes(x = "", y = n, fill = Scenario)) +
geom_text(aes(label = n), position = position_stack(vjust = 0.5)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Scenario")
#Plot a pie chart of homologous gain families
# Plotando um gráfico de pizza (pie chart)
ggplot(scn_counts, aes(x = "", y = n, fill = Scenario)) +
geom_text(aes(label = n), position = position_stack(vjust = 0.5), size = 2.5) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Scenario")
#Plot a pie chart of homologous gain families
# Plotando um gráfico de pizza (pie chart)
ggplot(scn_counts, aes(x = "", y = n, fill = Scenario)) +
geom_text(aes(label = n), position = position_stack(vjust = 0.5), size = 4) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Scenario")
#Plot a pie chart of homologous gain families
# Plotando um gráfico de pizza (pie chart)
ggplot(scn_counts, aes(x = "", y = n, fill = Scenario, label = n)) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = n), position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Scenario")
View(classified_df)
gain_fam <- classified_df %>%
filter(contains(Fam_class, "gain", ignore.case = TRUE))
gain_fam <- classified_df %>%
filter(Fam_class == "gain")
View(gain_fam)
# Scenario 1 (1:2+)
scn1 <- gain_fam %>%
filter(pvu_counts==1, gma_counts>1)
#Scenario 2 (2:3+)
scn2 <- gain_fam %>%
filter(pvu_counts>=2, gma_counts>2)
#Count homologous families in each scenario
scn_counts <- classified_df %>%
filter((pvu_counts == 1 & gma_counts > 1) | (pvu_counts >= 2 & gma_counts > 2)) %>%
count(Scenario = ifelse(pvu_counts == 1 & gma_counts > 1, "scn1(1:2+)", "scn2(2:3+)"))
#Count homologous families in each scenario
scn_counts <- gain_fam %>%
filter((pvu_counts == 1 & gma_counts > 1) | (pvu_counts >= 2 & gma_counts > 2)) %>%
count(Scenario = ifelse(pvu_counts == 1 & gma_counts > 1, "scn1(1:2+)", "scn2(2:3+)"))
#Plot a pie chart of homologous gain families
ggplot(scn_counts, aes(x = "", y = n, fill = Scenario, label = n)) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = n), position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Scenario")
View(df_fam_class_counts)
View(classified_df)
classified_df_filted <- na.omit(classified_df)
# Sum gma_counts and pvu_counts for each Fam_class
genes_per_class <- classified_df_filted %>%
group_by(Fam_class) %>%
summarise(total_gma_counts = sum(gma_counts, na.rm = TRUE),
total_pvu_counts = sum(pvu_counts, na.rm = TRUE))
# Plot results
ggplot(genes_per_class, aes(x = Fam_class)) +
geom_bar(aes(y = total_gma_counts), stat = "identity", fill = "skyblue", alpha = 0.6, position = "dodge") +
geom_bar(aes(y = total_pvu_counts), stat = "identity", fill = "salmon", alpha = 0.6, position = "dodge") +
labs(x = "Fam_class", y = "Total Counts", title = "Counts per Fam_class") +
scale_fill_manual(values = c("skyblue", "salmon")) +
theme_minimal()
# Reshape the data
genes_per_class_long <- genes_per_class %>%
pivot_longer(cols = c(total_gma_counts, total_pvu_counts),
names_to = "Gene_Type",
values_to = "Total_Counts")
# Plot the results
ggplot(genes_per_class_long, aes(x = Fam_class, y = Total_Counts, fill = Gene_Type)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Fam_class", y = "Total Counts", title = "Stacked Barplot of Counts per Fam_class") +
scale_fill_manual(values = c("skyblue", "salmon")) +  # Color for gma_counts and pvu_counts respectively
theme_minimal()
# Plot the results
ggplot(genes_per_class_long, aes(x = Fam_class, y = Total_Counts, fill = Gene_Type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(x = "Fam_class", y = "Total Counts", title = "Dodged Barplot of Counts per Fam_class") +
scale_fill_manual(values = c("skyblue", "salmon")) +  # Color for gma_counts and pvu_counts respectively
theme_minimal()
# Plot the results
ggplot(genes_per_class_long, aes(x = Fam_class, y = Total_Counts, fill = Gene_Type)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Total_Counts), position = position_dodge(width = 0.7), vjust = -0.5) +
labs(x = "Fam_class", y = "Total Counts", title = "Dodged Barplot of Counts per Fam_class") +
scale_fill_manual(values = c("skyblue", "salmon")) +  # Color for gma_counts and pvu_counts respectively
ylim(0, 8000) +  # Set y-axis limit
theme_minimal()
gma_wgd_ks <- read_delim("~/dragonstone/kaks_july_2023/Scripts_for_GB/calculate_Ka_Ks_pipeline/result/gma.wgd.kaks",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
gma_wgd_ks <- read_delim("home/dayana/dragonstone/kaks_july_2023/Scripts_for_GB/calculate_Ka_Ks_pipeline/result/gma.wgd.kaks",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
gma_wgd_ks <- read_delim("/home/dayana/dragonstone/kaks_july_2023/Scripts_for_GB/calculate_Ka_Ks_pipeline/result/gma.wgd.kaks",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(gma_wgd_ks)
colnames(gma_wgd_kaks) <- c("dup1", "dup2", "ka", "ks", "ka_ks", "pval")
colnames(gma_wgd_ks) <- c("dup1", "dup2", "ka", "ks", "ka_ks", "pval")
gma_wgd_ks <- gma_wgd_ks %>% select("dup1", "dup2", "ks")
#ks of gma genes: scn1(1:2+)
## Cenario 1 (1:2)
#gma genes cen1
genes_gain_cen1 <- read_delim("/home/dayana/dragonstone/August_2023_analysis/SEPTEMBER_pos_Quali/Fam_class/list_gma_gain_cen1.txt",
delim = "\t", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
View(genes_gain_cen1)
colnames(gain_cen1) <- "genes"
colnames(genes_gain_cen1) <- "genes"
#ks of gma genes: scn1(1:2+)
#gma genes cen1
genes_gain_scen1 <- read_delim("./genes_gain_cen1",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
ks_cen1 <- subset(gma_wgd_ks, dup1 %in% genes_gain_cen1$genes | dup2 %in% genes_gain_cen1$genes)
ks_cen1_filt <- ks_cen1 %>% filter(ks < 1)
# Plot ks density
ks_cen1_plot <- hist(ks_cen1_filt$ks,
main = "ks density scen1 (1:2+)",
xlab = "ks",
ylab = "Frequency",
col = "skyblue",
border = "black")
lines(density(ks_cen1_filt$ks), col = "red", lwd = 2)
# Ad
lines(density(ks_cen1_filt$ks), col = "red", lwd = 2)
# Plot ks density
ks_cen1_plot <- hist(ks_cen1_filt$ks,
main = "ks density scen1 (1:2+)",
xlab = "ks",
ylab = "Frequency",
col = "skyblue",
border = "black")
View(gma_wgd_ks)
View(gma_wgd_ks)
#ks of all duplicated mode of gma genes
gma_all_dupmode_ks <- read_delim("/home/dayana/dragonstone/Modes_Duplication/Results_gma/all_dupmode_ks.tsv",
delim = "\t", escape_double = FALSE,
col_types = cols(Ks = col_double()),
trim_ws = TRUE)
View(gma_all_dupmode_ks)
#remove NA rows
gma_all_dupmode_ks <- na.omit(gma_all_dupmode_ks)
library(doubletrouble)
#find ks peaks
peaks <- doubletrouble::find_ks_peaks(gma_all_dupmode_ks$Ks, npeaks = 2, verbose = TRUE)
names(peaks)
str(peaks)
doubletrouble::plot_ks_peaks(peaks)
p <- doubletrouble::plot_ks_peaks(peaks)
p
p
#find ks peaks
ks_peaks <- doubletrouble::find_ks_peaks(gma_all_dupmode_ks$Ks, npeaks = 2, verbose = TRUE)
#plot ks peaks distribution
doubletrouble::plot_ks_peaks(ks_peaks)
#find ks peaks
ks_peaks <- doubletrouble::find_ks_peaks(gma_all_dupmode_ks$Ks, npeaks = 2, max_ks = 1, verbose = TRUE)
#plot ks peaks distribution
doubletrouble::plot_ks_peaks(ks_peaks)
ks_scen1 <- subset(gma_all_dupmode_ks, dup1 %in% genes_gain_cen1$genes | dup2 %in% genes_gain_cen1$genes)
ks_peaks_scen1 <- doubletrouble::find_ks_peaks(ks_scen1$Ks, npeaks = 2, max_ks = 1, verbose = TRUE)
#plot ks peaks distribution in scen1
doubletrouble::plot_ks_peaks(ks_peaks_scen1)
#plot ks peaks distribution in scen1
doubletrouble::plot_ks_peaks(ks_peaks_scen1)
# Get SiZer map
feature::SiZer(ks_peaks_scen1)
# Ks peaks are significant? Get numeric vector of ks values.
ks_peaks_scen1_sizer <- ks_peaks_scen1$Ks[ks_peaks_scen1$ks <= 1]
feature::SiZer(ks_peaks_scen1_sizer)
#plot ks peaks distribution in scen1
doubletrouble::plot_ks_peaks(ks_peaks_scen1)
#gma genes scen2 (2:3+)
list_gma_gain_cen2 <- read_delim("/home/dayana/dragonstone/August_2023_analysis/SEPTEMBER_pos_Quali/Fam_class/list_gma_gain_cen2.txt",
delim = "\t", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
colnames(list_gma_gain_cen2) <- "genes"
#gma genes scen2 (2:3+)
genes_gain_cen2 <- read_delim("/home/dayana/dragonstone/August_2023_analysis/SEPTEMBER_pos_Quali/Fam_class/list_gma_gain_cen2.txt",
delim = "\t", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
colnames(list_gma_gain_cen2) <- "genes"
colnames(genes_gain_cen2) <- "genes"
ks_scen2 <- subset(gma_all_dupmode_ks, dup1 %in% genes_gain_cen2$genes | dup2 %in% genes_gain_cen2$genes)
ks_peaks_scen2 <- doubletrouble::find_ks_peaks(ks_scen2$Ks, npeaks = 2, max_ks = 1, verbose = TRUE)
#plot ks peaks distribution in scen1
doubletrouble::plot_ks_peaks(ks_peaks_scen2)
# Get numeric vector of Ks values <= 1
ks_scen2_sizer <- ks_csen2$Ks[ks_scen2$Ks <= 1]
# Get numeric vector of Ks values <= 1
ks_scen2_sizer <- ks_scen2$Ks[ks_scen2$Ks <= 1]
# Get SiZer map
feature::SiZer(ks_scen2_sizer)
#plot ks peaks distribution in scen1
doubletrouble::plot_ks_peaks(ks_peaks_scen2)
ks_scen1_sizer <- ks_scen1$Ks[ks_scen1$Ks <= 1]
#SiZer map
feature::SiZer(ks_scen1_sizer)
ks_scen2_sizer <- ks_scen2$Ks[ks_scen2$Ks <= 1]
#SiZer map
feature::SiZer(ks_scen2_sizer)
#scen1
dens_ks_scen1 <- ks_cen1
dens_ks_scen1$class <- "S1"
View(dens_ks_scen1)
#cen2
dens_ks_scen2 <- ks_cen2
ks_scen2 <- subset(gma_all_dupmode_ks, dup1 %in% genes_gain_cen2$genes | dup2 %in% genes_gain_cen2$genes)
#scen1
dens_ks_scen1 <- ks_scen1
dens_ks_scen1$class <- "S1"
#cen2
dens_ks_scen2 <- ks_scen2
dens_ks_scen2$class <- "S2"
dens_ks_scen1_and_scen2 <- rbind(dens_ks_scen1, dens_ks_scen2)
colnames(dens_ks_scen1_and_scen2) <- c("dup1", "dup2", "Ks", "mode")
dens_ks_scen1_and_cen2_filt <- dens_ks_scen1_and_scen2 %>% filter(Ks <=1)
View(dens_ks_scen1_and_cen2_filt)
# Create a density plot with modes indicated by colored lines
ggplot(dens_ks_scen1_and_scen2_filt, aes(x = Ks, fill = mode)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("S1" = "blue", "S2" = "yellow")) +
labs(x = "ks", y = "Density", fill = "mode") +
theme_minimal()
dens_ks_scen1_and_scen2 <- rbind(dens_ks_scen1, dens_ks_scen2)
colnames(dens_ks_scen1_and_scen2) <- c("dup1", "dup2", "Ks", "mode")
dens_ks_scen1_and_cen2_filt <- dens_ks_scen1_and_scen2 %>% filter(Ks <=1)
dens_ks_scen1_and_scen2_filt <- dens_ks_scen1_and_scen2 %>% filter(Ks <=1)
dens_ks_scen1_and_scen2_filt <- dens_ks_scen1_and_scen2 %>% filter(Ks <=1)
# Create a density plot with modes indicated by colored lines
ggplot(dens_ks_scen1_and_scen2_filt, aes(x = Ks, fill = mode)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("S1" = "blue", "S2" = "yellow")) +
labs(x = "ks", y = "Density", fill = "mode") +
theme_minimal()
print(citation('doubletrouble'), bibtex = TRUE)
save.image("~/Desktop/Genes_oil_traits/homofam_oil_traits.RData")
load("~/Desktop/Genes_oil_traits/homofam_oil_traits.RData")
View(gma_homofam_genes)
library(readr)
pvu_homofam_genes <- read_delim("~/dragonstone/August_2023_analysis/SEPTEMBER_pos_Quali/Oil_homofam/Genes_INFO_draft_table3.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
knitr::opts_chunk$set(echo = TRUE)
pvu_homofam_genes <- pvu_homofam_genes %>% filter(Species=="pvu")
library(tidyverse)
pvu_homofam_genes <- pvu_homofam_genes %>% filter(Species=="pvu")
pvu_homofam_genes <- pvu_homofam_genes %>% select(Homofam, Species, GeneID)
View(pvu_homofam_genes)
View(genes_gain_cen2)
library(readr)
genes_gain_scen1 <- read_csv("~/dragonstone/August_2023_analysis/SEPTEMBER_pos_Quali/Fam_class/list_gma_gain_cen1.txt",
col_names = FALSE)
#gma genes scen1 (1:2+)
#Data available as genes_gain_scen1
colnames(genes_gain_scen1) <- "genes"
#gma genes scen2 (2:3+)
#Data available as genes_gain_cen2
genes_gain_scen2 <- genes_gain_cen2
View(genes_gain_scen2)
View(gma_all_dupmode_ks)
save.image("~/Desktop/Genes_oil_traits/homofam_oil_traits.RData")
load("~/Desktop/Multiomic_analysis_oil_traits/Genes_oil_traits/homofam_oil_traits.RData")
